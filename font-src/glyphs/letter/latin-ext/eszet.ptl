$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Eszet : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Latin-S : SNeck

	local ymiddle : [mix 0 CAP 0.5] - HalfStroke
	local ymiddleCap : [mix 0 CAP 0.54] - HalfStroke
	local xmiddle : RightSB - ymiddle / 2 - Stroke * 0.75
	local xmiddleBot : RightSB - ymiddle / 2 - Stroke * 0.75
	local xfinal : Math.min
		xmiddle - 1 - Stroke * TanSlope
		Math.max (SB + Stroke * 2) [mix SB RightSB (1 / 4)]

	define [TraditionalBody slab tail] : glyph-proc
		include : MarkSet.b
		local l : SB * 1
		include : dispiro
			widths.lhs
			g4 ([mix SB RightSB 0.75] + HalfStroke * HVContrast) (CAP - Hook)
			hookstart (CAP - O)
			flat l XH
			curl l 0 [heading Downward]
		local t : mix 0 CAP 0.7
		local tm : [mix Descender t 0.625] + HalfStroke
		local tl : [mix l RightSB 0.35] + HalfStroke * HVContrast
		include : HBarTop (l + 1) (RightSB - HalfStroke * 1.2 - OX) t
		include : dispiro
			widths.rhs
			flat tl tm [heading Rightward]
			curl (tl + 1) tm [heading Rightward]
			g2 (RightSB - OX * 1.5) [mix Descender tm 0.70]
			g2 (RightSB - OX * 1.5) [mix Descender tm 0.67]
			alsoThru 0.5 0.75
			g4 [mix SB RightSB 0.35] Descender
		include : dispiro
			widths.center (Stroke * 1.1)
			corner tl (tm - Stroke) [heading Upward]
			corner (RightSB - HalfStroke * 1.2 - OX) t [heading Upward]
		if tail : include : VerticalHook (l + HalfStroke * HVContrast) 0 (-Hook * 1.2) Hook
		if slab : include : LeftwardBottomSerif SB 0 SideJut


	define [SulzbacherBody slab tail] : glyph-proc
		include : MarkSet.b
		include : dispiro
			widths.rhs
			flat SB 0 [heading Upward]
			curl SB XH
			arcvh
			g4 (Middle + O) (CAP - O)
			archv
			g4 (RightSB + O * 2) [mix CAP ymiddle 0.47]
			g4.left.end xmiddle ymiddle [heading Leftward]
		include : dispiro
			widths.rhs
			g4.right.start xmiddle (ymiddle + Stroke) [heading Rightward]
			archv
			g4   (RightSB - O) [mix 0 (ymiddle + Stroke) 0.5]
			arcvh
			flat xmiddleBot 0
			curl xfinal 0 [heading Leftward]
		if tail : include : VerticalHook (SB + HalfStroke * HVContrast) 0 (-Hook * 1.2) Hook
		if slab : include : LeftwardBottomSerif SB 0 SideJut


	define [LongSSLigBody slab tail] : glyph-proc
		include : MarkSet.b

		define swOuter : AdviceStroke2 3 3 CAP
		define strokeCoeff : StrokeWidthBlend 0 1 swInner
		define sEndX : Math.max
			SB + swOuter * HVContrast + (RightSB - SB - Stroke) * 0.1
			mix SB RightSB 0.3
		define widthInner : Width - swOuter * HVContrast - (RightSB - SB - Stroke) * 0.1
		define swInner : AdviceStroke2 2 3 XH (widthInner / Width)
		define ess: swInner * Ess / Stroke
		define sTurnX : Math.max sEndX [mix SB RightSB 0.3]
		define sBotX : Math.max (sEndX + 1) [mix sEndX RightSB 0.30]
		define sTopX : sTurnX + (RightSB - sBotX)

		define sTopHookX : sTopX + 0.5 * swInner * HVContrast
		define smoothATop : SmoothAOf (Smooth * (sTopHookX - SB - swInner * 0.375) / (RightSB - SB)) (Width - (RightSB - sTopHookX))
		define smoothBTop : SmoothBOf (Smooth * (sTopHookX - SB - swInner * 0.375) / (RightSB - SB)) (Width - (RightSB - sTopHookX))
		define innerSmoothB : 1 * smoothBTop # SmoothBOf (0.5 * swInner + (widthInner / Width) * [adviceSSmooth XH (-1) swInner]) widthInner


		include : dispiro
			widths.rhs swOuter
			flat SB 0 [heading Upward]
			curl SB (CAP - smoothATop)
			arcvh
			g4 ([mix SB sTopHookX 0.52] - CorrectionOMidX * swOuter) (CAP - O) [widths.rhs : mix swOuter swInner 0.5]
			archv
			g4 sTopHookX (CAP - smoothBTop + TanSlope * swInner) [widths.rhs.heading swInner Downward]
			alsoThru.g2 0.5 0.50 [widths.center swInner]
			g4 sTurnX [mix innerSmoothB (CAP - smoothBTop) 0.5] [widths.lhs.heading swInner Downward]
			alsoThru.g2 0.5 0.50 [widths.center swInner]
			g4   (RightSB - OX) (innerSmoothB - 2 * TanSlope * swInner) [widths.rhs swInner]
			arcvh
			flat ([Math.max (sEndX + 1) : Math.min (RightSB - innerSmoothB * 0.875) [mix sEndX RightSB 0.375]] + CorrectionOMidX * swInner) 0
			curl sEndX 0 [heading Leftward]

		if tail : include : VerticalHook (SB + 0.5 * swOuter * HVContrast) 0 (-Hook * 1.2) Hook swOuter
		if slab : include : LeftwardBottomSerif SB 0 SideJut

	create-glyph 'eszet.traditional' : TraditionalBody SLAB false
	create-glyph 'eszet.traditionalTailed' : TraditionalBody false true
	create-glyph 'eszet.sulzbacher' : SulzbacherBody SLAB false
	create-glyph 'eszet.sulzbacherTailed' : SulzbacherBody false true
	create-glyph 'eszet.longSSLig' : LongSSLigBody SLAB false
	create-glyph 'eszet.longSSLigTailed' : LongSSLigBody false true

	select-variant 'eszet' 0xDF

	create-glyph 'Eszet' 0x1E9E : glyph-proc
		include : MarkSet.capital
		local rightTopX : RightSB + O * 4
		include : dispiro
			widths.lhs
			flat rightTopX CAP
			curl Middle CAP
			archv
			flat SB XH
			curl SB 0 [heading Downward]
		include : dispiro
			widths.rhs
			g4   xmiddle (ymiddleCap + Stroke) [heading Rightward]
			archv
			g4   (RightSB - O * 2) [mix 0 (ymiddleCap + Stroke) 0.5]
			arcvh
			flat xmiddleBot 0
			curl xfinal 0 [heading Leftward]
		include : dispiro
			widths.rhs
			g4 rightTopX (CAP - Stroke)
			g4 xmiddle (ymiddleCap + Stroke) [widths Stroke 0]
		if SLAB : include : LeftwardBottomSerif SB 0 SideJut

