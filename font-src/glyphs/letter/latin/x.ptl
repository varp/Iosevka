$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-X : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-export HalfXStrand XStrand

	define [HalfXStrand stb slab _leftx lefty rightx righty turn pStraight tension _fine] : glyph-proc
		local sbCor : if stb ([StrokeWidthBlend 1 6] * OX * ([Math.abs (lefty - righty)] / CAP)) 0
		local leftx : _leftx + ((HalfStroke * HVContrast + sbCor) * [if (rightx > _leftx) 1 (-1)])
		local fine  : (_fine || Stroke) * 0.5

		if stb : begin
			local hst : HalfStroke * [DiagCor (righty - lefty) (rightx - leftx) 0 0]
			local hse : HalfStroke * [Math.min 0.97 ([AdviceStroke 3] / Stroke)]
			include : dispiro
				corner leftx lefty [widths.heading hst hst [if (lefty < righty) Upward Downward]]
				corner rightx righty [widths hse hse]

		: else : begin
			local height : Math.abs (lefty - righty)
			local slabClearance : if slab [AdviceStroke2 2 3 height] 0
			local turnyleft : mix lefty righty [if slab [Math.max turn (slabClearance / height)] turn]
			local cyleft : mix turnyleft righty tension
			local straightxleft : mix leftx rightx pStraight
			local straightyleft : mix cyleft righty pStraight
			include : dispiro
				widths.center
				flat leftx lefty [heading [if (lefty < righty) Upward Downward]]
				curl leftx turnyleft [heading [if (lefty < righty) Upward Downward]]
				quadcontrols 0 ((cyleft - turnyleft) / (straightyleft - turnyleft)) 24
				flat straightxleft straightyleft
				curl rightx righty

	define [XStrand stb slab _leftx lefty _rightx righty turn pStraight tension] : glyph-proc
		local middlex : mix _leftx _rightx 0.5
		local middley : mix lefty righty 0.5

		include : HalfXStrand stb slab _leftx lefty middlex middley turn pStraight tension
		include : HalfXStrand stb slab _rightx righty middlex middley turn pStraight tension

	define [UpperXBase fStraight] : union
		XStrand fStraight SLAB SB 0 RightSB CAP 0.1 0.4 0.28
		XStrand fStraight SLAB SB CAP RightSB 0 0.1 0.4 0.28

	define [XMotionSerifs top] : glyph-proc
		include : tagged 'serifLT' : LeftwardTopSerif SB top SideJut

	create-glyph 'X.straight' : glyph-proc
		include : MarkSet.capital
		include : WithAIHSerifsMask CAP 0 SB RightSB : UpperXBase true
		include : AIHSerifs CAP
	create-glyph 'X.curly' : glyph-proc
		include : MarkSet.capital
		include : WithAIHSerifsMask CAP 0 SB RightSB : UpperXBase false
		include : AIHSerifs CAP
	create-glyph 'X.straightMotionSerifed' : glyph-proc
		include : MarkSet.capital
		include : UpperXBase true
		include : XMotionSerifs CAP
	create-glyph 'X.curlyMotionSerifed' : glyph-proc
		include : MarkSet.capital
		include : UpperXBase false
		include : XMotionSerifs CAP

	define [LowerXBase fStraight] : begin
		local turn    : if SLAB 0.1  0.1
		local tension : if SLAB 0.24 0.24
		union
			XStrand fStraight SLAB SB 0 RightSB XH turn 0.4 tension
			XStrand fStraight SLAB SB XH RightSB 0 turn 0.4 tension

	create-glyph 'x.straight' : glyph-proc
		include : MarkSet.e
		include : WithAIHSerifsMask XH 0 SB RightSB : LowerXBase true
		include : AIHSerifs XH
	create-glyph 'x.curly' : glyph-proc
		include : MarkSet.e
		include : WithAIHSerifsMask XH 0 SB RightSB : LowerXBase false
		include : AIHSerifs XH
	create-glyph 'x.straightMotionSerifed' : glyph-proc
		include : MarkSet.e
		include : LowerXBase true
		include : XMotionSerifs XH
	create-glyph 'x.curlyMotionSerifed' : glyph-proc
		include : MarkSet.e
		include : LowerXBase false
		include : XMotionSerifs XH

	define [ChiBase fStraight] : union
		XStrand fStraight false SB Descender RightSB XH 0.05 0.4 0.11
		XStrand fStraight false SB XH RightSB Descender 0.05 0.4 0.11

	create-glyph 'grek/chi.straight' : composite-proc [MarkSet.p] [ChiBase true]
	create-glyph 'grek/chi.curly' : composite-proc [MarkSet.p] [ChiBase false]

	select-variant 'X' 'X'
	select-variant 'x' 'x'
	select-variant 'grek/chi' 0x3C7

	alias 'grek/Chi' 0x3A7 'X'
	alias 'cyrl/Ha' 0x425 'X'
	alias 'cyrl/ha' 0x445 'x'
	alias 'latinchi' 0xAB53 'grek/chi'

	with-related-glyphs 'cyrl/Hadescender' 0x4B2 'X' : lambda [src sel] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : CyrDescender RightSB (connex -- 0.5)

	with-related-glyphs 'cyrl/hadescender' 0x4B3 'x' : lambda [src sel] : glyph-proc
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include : CyrDescender RightSB (connex -- 0.5)

	glyph-block-import Letter-Blackboard : BBS BBD
	define [BBXShape l r top] : let [kDiag : DiagCorDs top (r - l) BBD] : union
		intersection
			Rect top 0 (-Width) (Width * 2)
			union
				ExtLineCenter 1 BBS l top (r - kDiag * BBD) 0
				ExtLineCenter 1 BBS (l + kDiag * BBD) top r 0
		HBarTop    l (l + kDiag * BBD) top BBS
		HBarBottom r (r - kDiag * BBD) 0 BBS
		intersection
			Rect top 0 (-Width) (Width * 2)
			difference
				ExtLineCenter 1 BBS l 0 r top
				spiro-outline
					corner l top
					corner (l + kDiag * BBD) top
					corner r 0
					corner (r - kDiag * BBD) 0

	create-glyph 'mathbb/X' 0x1D54F : composite-proc [MarkSet.capital] [BBXShape SB RightSB CAP]
	create-glyph 'mathbb/x' 0x1D569 : composite-proc [MarkSet.e]       [BBXShape SB RightSB XH]
