$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-K : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : DiagonalTailInnerRadius DiagonalTailF

	local [KBalance slab straightBar] : if slab (Width / 16) : if straightBar (Width / 32) 0
	local [KBalanceRight slab straightBar] : if slab (-Width / 32) : if straightBar (Width / 32) 0
	local [KBalanceRightCursive slab straightBar] : if slab (Width / 32) : if straightBar (Width / 32) 0
	local [KO slab straightBar top stroke] : if straightBar (([if slab (0) (-4)] * OX - stroke / 3) * (XH / top)) 0

	define [KSlabs top left right stroke straightBar] : glyph-proc
		local kshRight : right + [KBalanceRight true straightBar]
		local topSerifX : kshRight - (1.15 * stroke * (Width * 2 / UPM) / 2 - stroke / 2) * HVContrast * [if para.isItalic 1 0] - stroke / 2 * 0.5 * HVContrast
		local bottomSerifX : kshRight - O * [if para.isItalic 1 0]

		include : RightwardTopSerif topSerifX top (SideJut + stroke / 2 * 0.5 * HVContrast)
		include : RightwardBottomSerif bottomSerifX 0 SideJut

	define [KStraightLegShapeImpl left right stroke top slabLeft slab] : glyph-proc
		local fine : AdviceStroke 3.5
		local Ok : KO slab true top stroke
		local kshLeft : left + [KBalance slabLeft true]
		local kshRight : right + [KBalanceRight slab true]

		local attach (top * 0.42 - stroke)
		local attach2 (top * 0.72 + stroke)
		include : intersection
			Rect top 0 kshLeft (2 * Width)
			dispiro
				widths.rhs stroke
				flat (kshRight - Ok) top
				curl (kshLeft + stroke) attach [widths 0 fine]

		include : intersection
			spiro-outline
				corner (kshLeft + stroke) 0
				corner (kshLeft + stroke) (attach + 1)
				corner (kshRight - Ok - 1) top
				corner (kshRight - Ok) top
				corner (kshRight - Ok) 0
			dispiro
				widths.lhs stroke
				flat (kshRight - Ok) 0
				curl (kshLeft + stroke) attach2

		if slab : include : KSlabs top left right stroke true

	define [KSymmetricLegsImpl fConnected] : function [left right stroke top slabLeft slab] : glyph-proc
		local fine : AdviceStroke [if fConnected 3.5 3]
		local Ok : KO slab true top stroke

		local kshLeft : left + [KBalance slabLeft true]
		local kshRight : right + [KBalanceRight slab true]

		local xAttach : kshLeft + stroke * HVContrast + [if fConnected [AdviceStroke 6] fine]
		local yAttach : top * [if fConnected 0.42 0.49] - stroke * [if fConnected 1 (-0.1)]
		local coYAttach : top - yAttach
		include : intersection
			Rect top (0.5 * top) kshLeft (2 * Width)
			dispiro
				widths.rhs stroke
				flat (kshRight - Ok) top
				curl [mix (kshRight - Ok) xAttach 2] [mix top yAttach 2] [widths.rhs fine]

		include : intersection
			Rect (0.5 * top) 0 kshLeft (2 * Width)
			dispiro
				widths.lhs stroke
				flat (kshRight - Ok) 0
				curl [mix (kshRight - Ok) xAttach 2] [mix 0 coYAttach 2] [widths.lhs fine]

		if fConnected : include : intersection
			HBar kshLeft (2 * Width) (0.5 * top) stroke
			union
				Rect top 0 kshLeft xAttach
				spiro-outline
					corner (kshRight - Ok - 1) top
					corner (xAttach - 1) yAttach
					corner (xAttach - 1) top
				spiro-outline
					corner (kshRight - Ok - 1) 0
					corner (xAttach - 1) coYAttach
					corner (xAttach - 1) 0

		if slab : include : KSlabs top left right stroke true

	define [KCurlyLegShapeImpl left right stroke top slabLeft slab] : glyph-proc
		local turn : top * 0.99
		local fine : AdviceStroke 3.5
		local kshLeft : left + [KBalance slabLeft false]
		local kshRight : right + [KBalanceRight slab false]

		local attach (top * [if slab 0.325 0.375])
		local attach2 [if slab [mix kshLeft kshRight 0.48] Middle]
		local kDiag : mix 1 [DiagCorDs (top - attach) (kshRight - kshLeft) stroke] 0.5
		include : intersection
			Rect top 0 kshLeft (2 * Width)
			dispiro
				g4.down.start (kshRight) top [widths.rhs.heading (stroke * kDiag) Downward]
				bezcontrols 0 0.2 0.5 0.65 8
				g4 (kshLeft + stroke) attach [widths.rhs fine]
		include : difference
			dispiro
				widths.center
				g4.up.start (kshRight - O - stroke / 2 * HVContrast) 0 [heading Upward]
				quadcontrols 0 0.25 8
				g4 attach2 (top * 0.61) [widths.center fine]
			spiro-outline
				corner.down.start (kshRight - 1) top
				bezcontrols 0 0.2 0.5 0.65 8
				corner (kshLeft + stroke) (attach + 1)
				corner kshLeft 0
				corner kshLeft top

		if slab : include : KSlabs top left right stroke false

	define [KCursiveLoopAndLegDimen top straightBar slabLeft slab] : begin
		define kshLeft : SB + [KBalance slabLeft straightBar]
		define kshRight : RightSB + [KBalanceRightCursive slab straightBar] + 0.2 * Stroke

		define arcFine : Stroke * CThin
		define arcStroke : AdviceStroke2 2 3 top
		define arcTerminalFine : AdviceStroke2 3 4 top
		define expansion : Width / (UPM / 2) - 1

		define pArcStartY    : 0.46 + 0.1 * (arcStroke / Width)
		define pArcTopX      : 0.625 - 0.05 * (arcStroke / Width) - 0 * expansion * (arcStroke / UPM)
		define pArcRightX    : 0.95 - TanSlope * 0.25 + ([if SLAB 0 0.05] + 0.75 * TanSlope) * (arcStroke / Width)
		define pArcRightY    : 0.575 - 0.625 * (arcStroke / Width) - 0.5 * expansion * (arcStroke / UPM)
		define pArcTerminalX : 0.15 - 0.5 * (arcStroke / Width)
		define pArcBottomX   : 0.15 + 0.5 * (arcStroke / Width)
		define pArcBottomY   : 0.45 + 0.5 * (arcStroke / Width)

		define arcRightSlope : 0.05 + 0.2 * (arcStroke / Width) + 1 * expansion * (arcStroke / UPM)
		define arcTopSlope   : shoulderMidSlope arcFine arcStroke 1

		define arcStartX    : kshLeft + HVContrast * (Stroke - arcFine)
		define arcStartY    : top * pArcStartY
		define arcTerminalX : mix arcStartX kshRight pArcTerminalX
		define arcBottomX   : mix arcStartX kshRight pArcBottomX
		define arcBottomY   : mix 0 top pArcBottomY
		define arcTerminalY : arcBottomY + arcStroke * 0.125 - O
		define arcRightX    : kshRight * pArcRightX
		define arcRightY    : mix arcBottomY top pArcRightY
		define arcTopX      : mix arcStartX arcRightX pArcTopX
		define arcTopY      : top - O

		define slabStartX   : kshRight - (Stroke * 0.325 - TanSlope) * HVContrast

		return : object arcStartX arcStartY arcFine arcRightX arcRightY arcRightSlope arcTopX arcTopY arcStroke arcTopSlope arcBottomX arcBottomY arcTerminalX arcTerminalY arcTerminalFine kshRight slabStartX

	define [KCursiveLoopAndLegShapeImpl tailed top slabLeft slab] : glyph-proc
		define dim : KCursiveLoopAndLegDimen top true slabLeft slab
		include : dispiro
			g4.up.start dim.arcStartX dim.arcStartY [widths.heading 0 dim.arcFine Upward]
			arcvh 8 2.0
			g4.right.mid dim.arcTopX dim.arcTopY
				widths.rhs.heading dim.arcStroke {.y (+1) .x dim.arcTopSlope}
			archv
			g4.down.mid dim.arcRightX (dim.arcRightY - 0.5 * dim.arcRightSlope * dim.arcStroke * HVContrast)
				heading {.y dim.arcRightSlope .x HVContrast}
			arcvh
			g4 dim.arcBottomX (dim.arcBottomY - dim.arcStroke) [widths.rhs.heading dim.arcTerminalFine Leftward]
			g4 dim.arcStartX (dim.arcTerminalY - dim.arcStroke) [widths.rhs.heading dim.arcStroke Leftward]

		define swDiagTail Stroke
		define swDiagTailAdj : swDiagTail / [mix 1 HVContrast 0.375]
		define xDTGap : 0.07 * (RightSB - SB) - 0.1 * swDiagTail
		define xDTStart : dim.arcTerminalX + 0.75 * swDiagTail * HVContrast + xDTGap
		define xDTEnd : dim.kshRight - 0.8 * Hook - 0.375 * swDiagTail * HVContrast + xDTGap

		include : difference
			if tailed
				then : dispiro
					flat xDTStart dim.arcTerminalY [widths.center swDiagTailAdj]
					curl (xDTEnd + 0.125 * [DiagonalTailInnerRadius]) (0.9 * swDiagTail + 0.5 *[DiagonalTailInnerRadius])
					DiagonalTailF 1 [DivFrame 1] xDTEnd 0 (Hook - swDiagTail * 0.375) swDiagTail
				else : intersection
					Rect XH 0 0 [if slab (dim.slabStartX + SideJut) (Width * 2)]
					dispiro
						flat dim.arcTerminalX dim.arcTerminalY [widths.lhs]
						curl dim.kshRight 0 [widths.rhs]
			spiro-outline
				g4.up.start (dim.arcStartX - O) dim.arcStartY
				arcvh 4 2.1
				g4.right.mid dim.arcTopX (dim.arcTopY + O)
				archv 4 2.2
				g4.down.mid (dim.arcRightX + O) (dim.arcRightY - 0.5 * dim.arcRightSlope * dim.arcStroke * HVContrast)
				arcvh
				g4 dim.arcBottomX (dim.arcBottomY - dim.arcStroke - O)
				g4 dim.arcStartX (dim.arcTerminalY - dim.arcStroke - O)

		if (slab && !tailed) : include : RightwardBottomSerif dim.slabStartX 0 SideJut

	define [KNormalLegs                top slabLeft slab] :  KStraightLegShapeImpl       SB RightSB Stroke top slabLeft slab
	define [KSymmetricTouchingLegs     top slabLeft slab] : [KSymmetricLegsImpl false]   SB RightSB Stroke top slabLeft slab
	define [KSymmetricConnectedLegs    top slabLeft slab] : [KSymmetricLegsImpl true]    SB RightSB Stroke top slabLeft slab
	define [KCurlyLegs                 top slabLeft slab] :  KCurlyLegShapeImpl          SB RightSB Stroke top slabLeft slab
	define [KCursiveLegs               top slabLeft slab] :  KCursiveLoopAndLegShapeImpl false             top slabLeft slab
	define [KDiagTailCursiveLegs       top slabLeft slab] :  KCursiveLoopAndLegShapeImpl true              top slabLeft slab

	define [KCyrlCursiveDescender top straightBar slabLeft slab] : begin
		define dim : KCursiveLoopAndLegDimen top straightBar slabLeft slab
		return : CyrDescender dim.slabStartX (connex -- 0.5)

	define [KCyrlNormalDescender top straightBar slabLeft slab] : CyrDescender
		RightSB + [KBalanceRight slab straightBar] - [KO slab straightBar top Stroke]
		connex -- [if straightBar 1 0]

	define [KHookTopBar slab straightBar] : union
		VBarLeft (SB + [KBalance slab straightBar]) 0 (CAP - Hook - HalfStroke)
		VerticalHook (SB + [KBalance slab straightBar] + HalfStroke * HVContrast) (CAP - Hook - HalfStroke) HookX (-Hook)

	define UpperKConfig : object
		straight                         { KNormalLegs                 KStraightLegShapeImpl        [if SLAB 1 0] [if SLAB 1 0]  }
		curly                            { KCurlyLegs                  KCurlyLegShapeImpl           [if SLAB 1 0] [if SLAB 1 0]  }
		symmetricTouching                { KSymmetricTouchingLegs     [KSymmetricLegsImpl    false] [if SLAB 1 0] [if SLAB 1 0]  }
		symmetricConnected               { KSymmetricConnectedLegs    [KSymmetricLegsImpl    true]  [if SLAB 1 0] [if SLAB 1 0]  }
		straightSerifless                { KNormalLegs                 KStraightLegShapeImpl        0 0 }
		curlySerifless                   { KCurlyLegs                  KCurlyLegShapeImpl           0 0 }
		symmetricTouchingSerifless       { KSymmetricTouchingLegs     [KSymmetricLegsImpl    false] 0 0 }
		symmetricConnectedSerifless      { KSymmetricConnectedLegs    [KSymmetricLegsImpl    true]  0 0 }
		straightMotionSerifed            { KNormalLegs                 KStraightLegShapeImpl        2 0 }
		curlyMotionSerifed               { KCurlyLegs                  KCurlyLegShapeImpl           2 0 }
		symmetricTouchingMotionSerifed   { KSymmetricTouchingLegs     [KSymmetricLegsImpl    false] 2 0 }
		symmetricConnectedMotionSerifed  { KSymmetricConnectedLegs    [KSymmetricLegsImpl    true]  2 0 }

	define [UpperKLTSerif slabTop top straightBar] : match slabTop
		2 : LeftwardTopSerif (SB + [KBalance slabTop straightBar]) top SideJut
		1 : CenterTopSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) top Jut
		_ : glyph-proc

	define [UpperKLBSerif slabTop top straightBar] : match slabTop
		2 : LeftwardBottomSerif (SB + [KBalance slabTop straightBar]) 0 SideJut
		1 : CenterBottomSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) 0 Jut
		_ : glyph-proc

	foreach { suffix { Legs BashkirKaLegs slabTop slabBot } } [Object.entries UpperKConfig] : do
		local straightBar : Legs !== KCurlyLegs

		create-glyph "K.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : VBarLeft (SB + [KBalance slabTop straightBar]) 0 CAP
			include : Legs CAP slabTop slabBot
			if slabTop : include : UpperKLTSerif slabTop CAP straightBar
			if slabBot : include : UpperKLBSerif slabTop CAP straightBar
			create-derived "KDescender.\(suffix)" : KCyrlNormalDescender CAP straightBar slabTop slabBot

		create-glyph "grek/kappa.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VBarLeft (SB + [KBalance slabTop straightBar]) 0 XH
			include : Legs XH slabTop false
			if slabTop : include : LeftwardTopSerif (SB + [KBalance slabTop straightBar]) XH SideJut

		create-glyph "smcpK.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : VBarLeft (SB + [KBalance slabTop straightBar]) 0 XH
			include : Legs XH slabTop slabBot
			if slabTop : include : UpperKLTSerif slabTop XH straightBar
			if slabBot : include : UpperKLBSerif slabTop XH straightBar
			create-derived "cyrl/kaDescender.\(suffix)" : KCyrlNormalDescender XH straightBar slabTop slabBot

		create-glyph "Khooktop.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Legs CAP slabTop slabBot
			include : KHookTopBar slabTop straightBar
			if slabBot : include : UpperKLBSerif slabTop CAP straightBar

		define [BashkirKaShape top] : glyph-proc
			local left : if slabTop ([mix SB RightSB 0.35] - MVertStroke / 2 * HVContrast) [mix SB RightSB 0.2]
			local leftNB : left - [KBalance slabTop straightBar]
			local barLeft : mix 0 SB [if slabTop 0.25 0.375]
			local sw : AdviceStroke 3

			include : HBarTop barLeft (Stroke * 0.1 + left) top
			include : VBarLeft left 0 top sw
			include : BashkirKaLegs leftNB RightSB Stroke top slabTop slabBot
			if slabBot : include : CenterBottomSerif (left + HalfStroke * HVContrast) 0 Jut
			if slabTop : include : DownwardLeftSerif barLeft top VJut (MVertStroke / HVContrast)

		create-glyph "cyrl/BashkirUpperKa.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : BashkirKaShape CAP

		create-glyph "cyrl/BashkirKa.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : BashkirKaShape XH


	define LowerKConfig : object
		straight                                  { KNormalLegs                SLAB (SLAB && !para.isItalic) }
		curly                                     { KCurlyLegs                 SLAB (SLAB && !para.isItalic) }
		cursive                                   { KCursiveLegs               SLAB (SLAB && !para.isItalic) }
		diagonalTailedSerifedCursive              { KDiagTailCursiveLegs       SLAB (SLAB && !para.isItalic) }
		symmetricTouching                         { KSymmetricTouchingLegs     SLAB (SLAB && !para.isItalic) }
		symmetricConnected                        { KSymmetricConnectedLegs    SLAB (SLAB && !para.isItalic) }
		straightMotionSerifed                     { KNormalLegs                true false                    }
		curlyMotionSerifed                        { KCurlyLegs                 true false                    }
		cursiveMotionSerifed                      { KCursiveLegs               true false                    }
		diagonalTailedSerifedCursiveMotionSerifed { KDiagTailCursiveLegs       true false                    }
		symmetricTouchingMotionSerifed            { KSymmetricTouchingLegs     true false                    }
		symmetricConnectedMotionSerifed           { KSymmetricConnectedLegs    true false                    }

	foreach { suffix { Legs slabTop slabBot } } [Object.entries LowerKConfig] : do
		local straightBar : Legs !== KCurlyLegs

		create-glyph "k.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : VBarLeft (SB + [KBalance slabTop straightBar]) 0 CAP
			include : Legs XH slabTop slabBot
			if slabTop : include : LeftwardTopSerif (SB + [KBalance slabTop straightBar]) CAP SideJut
			if slabBot : include : tagged 'serifLB'
				CenterBottomSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) 0 Jut
			create-derived "kDescender.\(suffix)" : KCyrlNormalDescender XH straightBar slabTop slabBot

		create-glyph "khooktop.\(suffix)" : glyph-proc
			include : MarkSet.b
			include : Legs XH straightBar slabTop slabBot
			include : KHookTopBar slabTop straightBar
			if slabBot : include : tagged 'serifLB'
				CenterBottomSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) 0 Jut

	select-variant 'K' 'K'
	alias 'grek/Kappa' 0x39A 'K'
	alias 'letterLike/kelvinSign' 0x212A 'K'
	select-variant 'KDescender' 0x2C69 (follow -- 'K')
	select-variant 'cyrl/Ka' 0x41A 'K' (shapeFrom -- 'K') (follow -- 'cyrl/ka')
	select-variant 'cyrl/KaDescender' 0x49A (shapeFrom -- 'KDescender') (follow -- 'cyrl/ka')

	select-variant 'k' 'k'
	select-variant 'kDescender' 0x2C6A

	select-variant 'grek/kappa' 0x3BA

	select-variant 'smcpK' 0x1D0B (follow -- 'K')
	alias 'latinkappa' 0x138 'smcpK'
	select-variant 'cyrl/ka' 0x43A (shapeFrom -- 'smcpK')
	select-variant 'cyrl/kaDescender' 0x49B (follow -- 'cyrl/ka')
	select-variant 'cyrl/ka.BGR' null (shapeFrom -- 'k') (follow -- 'cyrl/ka')

	select-variant 'Khooktop' 0x198
	select-variant 'khooktop' 0x199

	turned 'turnK' 0xA7B0 'K' Middle (CAP / 2)
	turned 'turnk' 0x29E  'k' Middle (CAP / 2)

	select-variant 'cyrl/BashkirUpperKa' 0x4A0 (follow -- 'cyrl/ka')
	select-variant 'cyrl/BashkirKa'      0x4A1 (follow -- 'cyrl/ka')


	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	define [BBKLegShape top left right] : begin
		local kDiag : DiagCorDs (top / 2) (right - left) BBD
		return : union
			HBarBottom (right - kDiag * BBD) right 0 BBS
			intersection
				Rect top 0 left (2 * Width)
				ExtLineCenter 2 BBS right top left (top / 2)
			intersection
				spiro-outline
					corner right top
					corner left (top / 2)
					corner left 0
					corner (Width * 2) 0
					corner (Width * 2) top
				union
					ExtLineCenter 2 BBS right 0 (left + kDiag * BBD) (top / 2)
					ExtLineCenter 2 BBS (right - kDiag * BBD) 0 left (top / 2)

	create-glyph 'mathbb/K' 0x1D542 : glyph-proc
		include : MarkSet.capital
		include : BBBarLeft SB 0 CAP
		include : BBKLegShape CAP (SB + BBD + HVContrast * BBS) RightSB

	create-glyph 'mathbb/k' 0x1D55C : glyph-proc
		include : MarkSet.b
		include : BBBarLeft SB 0 CAP
		include : BBKLegShape XH (SB + BBD + HVContrast * BBS) RightSB
