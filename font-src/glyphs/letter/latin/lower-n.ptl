$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Lower-N : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Marks : markHalfStroke
	glyph-block-import Letter-Shared-Shapes : CurlyTail nShoulder nShoulderKnots nShoulderMask
	glyph-block-import Letter-Shared-Shapes : RightwardTailedBar DToothlessRise DMBlend

	define [NTopLeftSerif] : tagged 'serifLT' : LeftwardTopSerif SB XH SideJut
	define [NBottomLeftSerif] : if (!para.isItalic)
		tagged 'serifLB' : CenterBottomSerif (SB + HalfStroke * HVContrast) 0 Jut
		glyph-proc
	define [NBottomRightSerif] : if (para.isItalic) [NBottomRightSerifItalic]
		tagged 'serifRB' : CenterBottomSerif (RightSB - HalfStroke * HVContrast) 0 Jut
	define [NBottomRightSerifItalic] : tagged 'serifRB' : RightwardBottomSerif RightSB 0 SideJut

	create-glyph 'n.straight' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 XH
		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			fine -- ShoulderFine

		if SLAB : begin
			include : NTopLeftSerif
			include : NBottomRightSerif
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.tailed' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 XH
		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			bottom -- (XH - SmallSmoothB + O)
			fine -- ShoulderFine
		include : RightwardTailedBar RightSB 0 (XH - SmallSmoothB)

		if SLAB : begin
			include : NTopLeftSerif
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.straightMotionSerifed' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 XH
		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			fine -- ShoulderFine

		include : NTopLeftSerif
		include : NBottomRightSerifItalic
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.motionSerifedTailed' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 XH
		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			bottom -- (XH - SmallSmoothB + O)
			fine -- ShoulderFine
		include : RightwardTailedBar RightSB 0 (XH - SmallSmoothB)

		include : NTopLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.earlessCornerStraight' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 (XH - DToothlessRise)
		include : dispiro
			widths.rhs
			g4 SB (XH - DToothlessRise)
			g4 (Middle - CorrectionOMidS) (XH - O)
			archv
			flat RightSB (XH - SmallSmoothB)
			curl RightSB 0 [heading Downward]

		if SLAB : begin
			include : NBottomRightSerif
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.earlessCornerTailed' : glyph-proc
		include : MarkSet.e

		include : VBarLeft SB 0 (XH - DToothlessRise)
		include : dispiro
			widths.rhs
			g4 SB (XH - DToothlessRise)
			g4 (Middle - CorrectionOMidS) (XH - O)
			archv
			flat RightSB (XH - SmallSmoothB)
			curl RightSB (XH - SmallSmoothB + O) [heading Downward]
		include : RightwardTailedBar RightSB 0 (XH - SmallSmoothB)

		if SLAB : begin
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.earlessRoundedStraight' : glyph-proc
		include : MarkSet.e

		include : dispiro
			widths.rhs
			flat SB 0 [heading Upward]
			curl SB (XH - SmallSmoothA)
			arcvh
			g4 (Middle - CorrectionOMidS) (XH - O)
			archv
			flat RightSB (XH - SmallSmoothB)
			curl RightSB 0 [heading Downward]

		if SLAB : begin
			include : NBottomRightSerif
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	create-glyph 'n.earlessRoundedTailed' : glyph-proc
		include : MarkSet.e

		include : dispiro
			widths.rhs
			flat SB 0 [heading Upward]
			curl SB (XH - SmallSmoothA)
			arcvh
			g4 (Middle - CorrectionOMidS) (XH - O)
			archv
			flat RightSB (XH - SmallSmoothB)
			curl RightSB (XH - SmallSmoothB + O) [heading Downward]
		include : RightwardTailedBar RightSB 0 (XH - SmallSmoothB)

		if SLAB : begin
			include : NBottomLeftSerif
		set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

	select-variant 'n' 'n'
	select-variant 'cyrl/pe.italic' (shapeFrom -- 'n')
	alias 'cyrl/pe.BGR' null 'n'

	with-related-glyphs 'nApostrophe' 0x149 'n' : lambda [src srl] : glyph-proc
		include : refer-glyph "commaAbove"
		include : Translate (Width + SB - Middle) 0
		include [refer-glyph src] AS_BASE

	# Eng
	create-glyph 'eng.straight' : glyph-proc
		include : MarkSet.p
		include [refer-glyph 'n.straight'] false
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	create-glyph 'eng.straightMotionSerifed' : glyph-proc
		include : MarkSet.p
		include [refer-glyph 'n.straightMotionSerifed'] false
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	create-glyph 'eng.earlessCornerStraight' : glyph-proc
		include : MarkSet.p
		include [refer-glyph 'n.earlessCornerStraight'] false
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	create-glyph 'eng.earlessRoundedStraight' : glyph-proc
		include : MarkSet.p
		include [refer-glyph 'n.earlessRoundedStraight'] false
		eject-contour 'serifRB'
		include : VerticalHook (RightSB - HalfStroke * HVContrast) 0 (-HookX) Hook

	select-variant 'eng' 0x14B

	create-glyph 'Eng' 0x14A : glyph-proc
		include : MarkSet.capital

		include : nShoulder
			left -- (SB + Stroke)
			right -- RightSB
			top -- CAP
			bottom -- (Hook + HalfStroke + O)
			sma -- SmoothA
			smb -- SmoothB
		include : VerticalHook (RightSB - HalfStroke * HVContrast) (Hook + HalfStroke + O) [Math.max ((SB - RightSB) / 2 + HalfStroke) (-HookX)] Hook
		include : VBar (SB + HalfStroke * HVContrast) 0 CAP

	with-related-glyphs 'nltail' 0x272 'n' : lambda [src srl] : glyph-proc
		include [refer-glyph src] AS_BASE
		eject-contour 'serifLB'
		include : VerticalHook (SB + HalfStroke * HVContrast) 0 (-HookX) Hook

	create-glyph 'nHookBottom.straight' : glyph-proc
		include [refer-glyph 'n.straight'] AS_BASE ALSO_METRICS
		eject-contour 'serifRB'
		include : refer-glyph 'rtailBR'

	create-glyph 'nHookBottom.straightMotionSerifed' : glyph-proc
		include [refer-glyph 'n.straightMotionSerifed'] AS_BASE ALSO_METRICS
		eject-contour 'serifRB'
		include : refer-glyph 'rtailBR'

	create-glyph 'nHookBottom.earlessCornerStraight' : glyph-proc
		include [refer-glyph 'n.earlessCornerStraight'] AS_BASE ALSO_METRICS
		eject-contour 'serifRB'
		include : refer-glyph 'rtailBR'

	create-glyph 'nHookBottom.earlessRoundedStraight' : glyph-proc
		include [refer-glyph 'n.earlessRoundedStraight'] AS_BASE ALSO_METRICS
		eject-contour 'serifRB'
		include : refer-glyph 'rtailBR'

	select-variant 'nHookBottom' 0x273 (follow -- 'eng')

	create-glyph 'ncurlytail' 0x235 : glyph-proc
		local fine : AdviceStroke 4
		local rinner : clamp (Width * 0.065) (XH * 0.05) (fine * 0.35)
		local wide : AdviceStroke 3
		local m1 : Math.min RightSB (Width - rinner * 2 - fine - OX)
		local x2 : mix SB m1 0.5
		local y2 : -fine
		include : MarkSet.e
		include : VBarLeft SB 0 XH wide
		include : dispiro
			nShoulderKnots
				left -- (SB + wide * HVContrast)
				right -- m1
				fine -- ShoulderFine
				bottom -- (rinner * 2 + fine)
				stroke -- wide
			CurlyTail fine rinner m1 0 (m1 + rinner * 2 + fine) x2 y2

		if SLAB : begin
			include : tagged 'serifLT' : LeftwardTopSerif SB XH SideJut
			if (!para.isItalic) : begin
				include : tagged 'serifLB' : CenterBottomSerif (SB + HalfStroke * HVContrast) 0 Jut

	# eta
	create-glyph 'grek/eta' 0x3B7 : glyph-proc
		include : MarkSet.p
		set-base-anchor 'lf' (SB + HalfStroke) 0

		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			bottom -- Descender
		include : VBarLeft SB 0 XH
		if SLAB : begin
			include : tagged 'serifLT' : LeftwardTopSerif SB XH SideJut

	create-glyph 'latinEta' 0x220 : glyph-proc
		include : MarkSet.if
		set-base-anchor 'lf' (SB + HalfStroke) 0

		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			top -- CAP
			bottom -- Descender
		include : VBar (SB + HalfStroke * HVContrast) 0 CAP
		if SLAB : begin
			include : tagged 'serifLT' : LeftwardTopSerif SB CAP SideJut
			if (para.isItalic)
			: then : include : tagged 'serifRB' : RightwardBottomSerif RightSB Descender SideJut
			: else : include : tagged 'serifRB' : CenterBottomSerif (RightSB - HalfStroke * HVContrast) Descender Jut
			if (!para.isItalic) : begin
				include : tagged 'serifLB' : CenterBottomSerif (SB + HalfStroke * HVContrast) 0 Jut

	create-glyph 'latineta' 0x19E : glyph-proc
		include : MarkSet.p
		set-base-anchor 'lf' (SB + HalfStroke) 0

		include : nShoulder
			left -- (SB + Stroke * HVContrast)
			right -- RightSB
			bottom -- Descender
		include : VBarLeft SB 0 XH
		if SLAB : begin
			include : tagged 'serifLT' : LeftwardTopSerif SB XH SideJut
			if (para.isItalic)
			: then : include : tagged 'serifRB' : RightwardBottomSerif RightSB Descender SideJut
			: else : include : tagged 'serifRB' : CenterBottomSerif (RightSB - HalfStroke * HVContrast) Descender Jut
			if (!para.isItalic) : begin
				include : tagged 'serifLB' : CenterBottomSerif (SB + HalfStroke * HVContrast) 0 Jut

	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	create-glyph 'mathbb/n' 0x1D55F : glyph-proc
		local df : DivFrame 1 2
		local bbs BBS
		local bbd BBD
		set-width df.width
		include : df.markSet.e
		include : BBBarLeft df.leftSB 0 XH
		include : HBarBottom (df.rightSB - bbd) df.rightSB 0 bbs
		include : nShoulder
			stroke -- bbs
			left -- (df.leftSB + bbd + bbs * HVContrast)
			right -- df.rightSB
			fine -- ShoulderFine
		include : intersection
			VBarRight (df.rightSB - bbd) 0 XH bbs
			nShoulderMask
				stroke -- bbs
				left -- (df.leftSB + bbd + bbs * HVContrast + 1)
				right -- (df.rightSB - 1)
				top -- (XH - 1)
				fine -- ShoulderFine